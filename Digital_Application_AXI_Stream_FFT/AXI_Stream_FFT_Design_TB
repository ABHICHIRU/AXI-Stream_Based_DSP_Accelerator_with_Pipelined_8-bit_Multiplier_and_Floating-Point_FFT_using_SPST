
`timescale 1ns/1ps

module tb_fft8_f32_stream;

    reg clk, rst_n;
    reg         s_valid;
    wire        s_ready;
    reg  [31:0] s_real, s_imag;
    wire        m_valid;
    reg         m_ready;
    wire [31:0] m_real, m_imag;

    
    fft8_f32_stream dut (
        .clk(clk), .rst_n(rst_n),
        .s_valid(s_valid), .s_ready(s_ready),
        .s_real(s_real), .s_imag(s_imag),
        .m_valid(m_valid), .m_ready(m_ready),
        .m_real(m_real), .m_imag(m_imag)
    );

    // Clock
    initial clk = 1'b0;
    always #5 clk = ~clk; // 100 MHz clock

    initial m_ready = 1'b1;

   
    localparam [31:0] Z   = 32'h00000000; //  0.0
    localparam [31:0] P1  = 32'h3F800000; // +1.0
    localparam [31:0] M1  = 32'hBF800000; // -1.0
    localparam [31:0] P05 = 32'h3F000000; // +0.5
    localparam [31:0] M05 = 32'hBF000000; // -0.5  
    localparam [31:0] P2  = 32'h40000000; // +2.0
    localparam [31:0] P4  = 32'h40800000; // +4.0
    localparam [31:0] P8  = 32'h41000000; // +8.0 imaginary just uses s_imag

    // Send One Sample
    task send_sample;
        input [31:0] xr, xi;
        begin
            @(posedge clk);
            while (!s_ready) @(posedge clk);
            s_valid <= 1'b1; s_real <= xr; s_imag <= xi;
            @(posedge clk);
            s_valid <= 1'b0; s_real <= 32'h0; s_imag <= 32'h0;
        end
    endtask

    // Send Frame of 8 Samples
    task send_frame8;
        input [31:0] x0r,x0i,x1r,x1i,x2r,x2i,x3r,x3i;
        input [31:0] x4r,x4i,x5r,x5i,x6r,x6i,x7r,x7i;
        begin
            send_sample(x0r,x0i);
            send_sample(x1r,x1i);
            send_sample(x2r,x2i);
            send_sample(x3r,x3i);
            send_sample(x4r,x4i);
            send_sample(x5r,x5i);
            send_sample(x6r,x6i);
            send_sample(x7r,x7i);
        end
    endtask

    // Collect 8 Outputs
    reg [31:0] yr [0:7];
    reg [31:0] yi [0:7];
    integer k;
    task collect8;
        begin
            k=0;
            while (k<8) begin
                @(posedge clk);
                if (m_valid) begin
                    yr[k]=m_real;
                    yi[k]=m_imag;
                    $display("OUT[%0d] = REAL=%h IMAG=%h", k, m_real, m_imag);
                    k=k+1;
                end
            end
        end
    endtask

    initial begin
        s_valid=0; s_real=0; s_imag=0;
        rst_n=0;
        repeat(5) @(posedge clk);
        rst_n=1;

        $display("\n==== T1: Impulse ====");
        send_frame8(P1,Z, Z,Z, Z,Z, Z,Z, Z,Z, Z,Z, Z,Z, Z,Z);
        collect8();

        $display("\n==== T2: Constant Real 0.5 ====");
        send_frame8(P05,Z, P05,Z, P05,Z, P05,Z, P05,Z, P05,Z, P05,Z, P05,Z);
        collect8();

        $display("\n==== T3: Constant Imaginary ====");
        send_frame8(Z,P1, Z,P1, Z,P1, Z,P1, Z,P1, Z,P1, Z,P1, Z,P1);
        collect8();

        $display("\n==== T4: Complex Tone (k=1) ====");
        send_frame8(P1,Z, P05,P05, Z,P1, M05,P05, M1,Z, M05,M05, Z,M1, P05,M05);
        collect8();

        $display("\n==== T5: Alternating +1/-1 ====");
        send_frame8(P1,Z, M1,Z, P1,Z, M1,Z, P1,Z, M1,Z, P1,Z, M1,Z);
        collect8();

        $display("\n==== T6: Sparse Frame ====");
        send_frame8(P1,Z, Z,Z, Z,Z, P1,Z, Z,Z, Z,Z, P1,Z, Z,Z);
        collect8();

        $display("\n==== T7: Random Mix ====");
        send_frame8(P1,P1, P05,Z, Z,M1, M05,M05, P2,Z, Z,P05, P1,M1, P05,M05);
        collect8();

        $display("\n==== T8: Max Stress ====");
        send_frame8(32'h7F7FFFFF,Z, 32'h7F7FFFFF,Z, 32'h7F7FFFFF,Z, 32'h7F7FFFFF,Z,
                    32'h7F7FFFFF,Z, 32'h7F7FFFFF,Z, 32'h7F7FFFFF,Z, 32'h7F7FFFFF,Z);
        collect8();

        $display("\nAll tests done.");
        #50 $finish;
    end

endmodule
